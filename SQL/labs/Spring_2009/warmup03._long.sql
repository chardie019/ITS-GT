# Lab 2: Warm-up Questions
# Insert into webct table
# id | qtype | title | image | question | answers | category
INSERT INTO webct VALUES(2018,'P','Function for a Chirp','','Use the code provided in the pre-Lab section as a starting point in order to write a MATLAB function that will synthesize a &ldquo;chirp&rdquo; signal according to the following template. This will require that you relate the chirp parameters &mu;, &fnof;<sub>&ordm;</sub>, and &phi; to the starting and ending frequencies. Fill in code where you see ???.<pre>function [xx,tt] = make_chirp( f1, f2, dur, fsamp )<br><span class="ML_comment">%MAKE_CHIRP      generate a linear-FM chirp signal<br>%<br>% usage: xx = make_chirp( f1, f2, dur, fsamp )<br>%<br>%     f1 = starting frequency<br>%     f2 = ending frequency<br>%    dur = total time duration<br>%  fsamp = sampling frequency (OPTIONAL: default is 8000)<br>%<br>%     xx = (vector of) samples of the chirp signal<br>%     tt = vector of time instants for t=0 to t=dur<br>%<br></span>if( nargin < 4 ) <span class="ML_comment">%-- Allow optional input argument</span><br>  fsamp = 8000;<br>end<br>tt = ???<br>psi = 2*pi*( ????*tt + ?????*tt.*tt);<br>xx = real( exp(j*psi) );</pre>', 1, 'Warm-up03');
INSERT INTO webct VALUES(2019,'P','Make_chirp.m call','','As a test case, generate a chirp sound whose frequency starts at 2000 Hz and ends at -500 Hz; its duration should be 0.75 sec and the sampling rate should be \&fnof;<sub>s</sub> = 8000 samples/sec. Listen to the chirp using the <tt>soundsc</tt> function.<p>Give the exact calling sequence for <tt>make_chirp.m</tt> in order to produce the test case.', 1, 'Warm-up03');
INSERT INTO webct VALUES(2020,'P','Advanced Topic: Spectrograms','','It is often useful to think of a signal in terms of its spectrum. A signal&rsquo;s spectrum is a representation of the frequencies present in the signal. For a constant frequency sinusoid as in (1) the spectrum consists of two spikes, one at <tt>&omega;=2&pi;&fnof;<sub>&ordm;</sub></tt>, the other at <tt>&omega;=-2&pi;&fnof;<sub>&ordm;</sub></tt>. For a more complicated signal the spectrum may be very interesting, e.g., the case of FM, where the spectrum components are time-varying. One way to represent the time-varying spectrum of a signal is the <i>spectrogram</i> (see Chapter 3 in the text). A spectrogram is produced by estimating the frequency content in short sections of the signal. The magnitude of the spectrum over individual sections is plotted as intensity or color on a two-dimensional plot versus frequency and time.<div class="center"><span class="center lab_note">When unsure about a command, use <tt>help</tt>.</span></div>There are a few important things to know about spectrograms:<p><OL TYPE="1"><LI>In MATLAB the function <tt>spectrogram</tt> will compute the spectrogram. Type <tt>help spectrogram</tt> to learn more about this function and its arguments.<p><LI>If you are working at home, you might not have the <tt>spectrogram</tt> function because it is part of the <i>Signal Processing Toolbox</i>. In that case, use the function <tt>plotspec(xx,fs)</tt> which is part of the <i>SPFirst Toolbox</i> which can be downloaded from<p><a href="http://users.ece.gatech.edu/mcclella/SPFirst/Updates/SPFirstMATLAB.html" target="_blank">http://users.ece.gatech.edu/mcclella/SPFirst/Updates/SPFirstMATLAB.html</a><p>&#9679; Note: The argument list for <tt>plotspec</tt> has a different ordering from <tt>spectrogram</tt>, because the <i>window length</i> is an optional third argument for <tt>plotspec</tt> (its default value is 256). In addition, <tt>plotspec</tt> does not use color for the spectrogram; instead, darker shades of gray indicate larger valus with black being the largest.<p><LI>Spectrograms are numerical calculations and provide only an estimate of the time-varying frequency content of a signal. There are theoretical limits on how well they can actually represent the frequency content of a signal. Another lab on the <i>SP-First CD-ROM</i> treats this issue with a project that uses the spectrogram to extract the frequencies of piano notes.<p><LI>A common call to the function is <tt>spectrogram(xx,1024,fs)</tt>. The second argument<sup>2</sup> is the <i>window length</i> which could be varied to get different looking spectrograms. In some cases, spectrogram needs a longer window length<sup>3</sup>, e.g., 1024 or 2048, in order to &ldquo;see&rdquo; the separate spectrum lines.<p><LI><b>Frequency Range:</b> Normally the spectrogram image contains only positive frequencies. However, you can produce a spectrogram image containing negative frequencies if you use the function <tt>plotspec</tt> and if you make the input signal complex. Even if your signal is real, you can add a very tiny imaginary part, e.g., <tt>xx = xx + j*1e-14</tt>, to make it seem to be complex-valued.<p><b>Warning:</b> This trick works nicely with <tt>plotspec</tt>. However, when used with <tt>spectrogram</tt> it produces an image that does not have the negative frequency region in the expected location.</OL><p>In order to see a typical spectrogram, run the following code:<p><pre>fs=8000; xx = cos(2000*pi*(0:1/fs:0.5)); spectrogram(xx,1024,fs); colorbar</pre>or:<pre>fs=8000; xx = cos(2000*pi*(0:1/fs:0.5)); plotspec(xx,fs,1024); colorbar</pre>Notice that the spectrogram image contains one horizontal line at the correct frequency of the sinusoid.<p>For a spectrogram with negative frequencies, try the following<pre>fs=8000; xx = cos(2000*pi*(0:1/fs:0.5)); plotspec(xx+j*1e-9,fs,1024); colorbar</pre>Demonstrate the two-sided spectrogram i.e., include the negative frequencies by using the MATLAB function <tt>plotspec</tt>.<p>For the sinusoid, describe the important features that you see in the spectrogram and explain why they are correct.', 1, 'Warm-up03');
INSERT INTO webct VALUES(2021,'P','Spectrogram of the chirp','','Next, show the spectrogram of the chirp produced in the previous part, Section 3.2. Describe the important features that you see in the spectrogram of the chirp and explain why they are correct.', 1, 'Warm-up03');